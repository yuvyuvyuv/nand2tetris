// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT 
        outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    //exactly the same code as CPU.hdl, change the ALU chip



    //decoding : “ixxaccccccdddjjj”.
    DMux(in = true, sel = instruction[15],a = Aop,b = Cop);

    //left most mux
    Mux16(a = ALUout, b = instruction, sel = Aop, out = Aregin);


    // A-register - load if A is dest or Aop
    Or(a = Aop, b = instruction[5], out = Aload);
    ARegister(in = Aregin, load = Aload, out = Aregout, out[0..14] = addressM);



    //right mux - A and M register selection, AM - the c/sel input is the a-bit, instruction[12]
    Mux16(a = Aregout, b = inM, sel = instruction[12], out = AMout);



    // D-register - only load when the "d1d" part of instruction And it is an C-op
    And(a = Cop, b = instruction[4], out = Dload);
    DRegister(in = ALUout, load = Dload, out = Dregout);





    //ALU - the six paramaters inputs are the six c-bit
    ExtendAlu(x = Dregout, y = AMout, 
        instruction = instruction[6..14], out = outM, out = ALUout, 
        zr = zr, ng=ng);


    //to calculate the jump boolean
    Or(a = ng, b = zr, out = ngORzr);
    Not(in = ngORzr, out = pos);
    And(a = pos, b = instruction[0], out = JGT);
    And(a = zr , b = instruction[1], out = JEQ);
    And(a = ng , b = instruction[2], out = JLT);

    Or(a = JGT, b = JEQ, out = JGE);
    Or(a = JGE, b = JLT, out = JMP);

    // jump if C-op
    And(a = Cop, b = JMP, out = jump);

    //if jump then load = 1, else inc = 1
    DMux(in = true, sel = jump, a = PCinc, b = PCA);
    PC(in = Aregout, reset = reset, load = PCA, inc = PCinc, out[0..14] = pc);    



    //set writeM if dd1 and C-op
    And(a = Cop, b = instruction[3], out = writeM);



}

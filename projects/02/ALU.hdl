// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    // get the negatives of x and y
    Not16(in = x, out = notx);
    Not16(in = y, out = noty);

    // get a 16 bit zero and the negative of it
    And16(a = x, b = notx, out = zero);
    Not16(in = zero, out = notzero);

    // choose the correct x and y (if both zx and nx are set it will just return zero)
    Mux4Way16(a = x, b = zero, c = notx, d = notzero , sel[0] = zx, sel[1] = nx, out = realx);
    Mux4Way16(a = y, b = zero, c = noty, d = notzero , sel[0] = zy, sel[1] = ny, out = realy);

    // get realx + realy 
    Add16(a = realx, b = realy, out = sum);
    // get realx & realy
    And16(a = realx, b = realy, out = and);

    // choose the correct output and get the negative
    Mux16(a = and, b = sum, sel = f, out = output);
    Not16(in = output, out = notoutput);

    // choose the final output
    Mux16(a = output, b = notoutput, sel = no, out = out, out[15] = test,out[0..7] = first, out[8..15] = second);

    Or(a = test, b = false, out = ng);

    Or8Way(in = first, out = check1);
    Or8Way(in = second, out = check2);

    Or(a = check1, b = check2, out = last);
    Not(in = last, out = zr);
}